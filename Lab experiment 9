package Class; 
import java.util.*; 
//Generic TreeNode class 
class TreeNode<T> { 
 T data; 
 TreeNode<T> left, right; 
 
 TreeNode(T data) { 
     this.data = data; 
     left = right = null; 
 } 
} 
//Generic Binary Tree class 
class BinaryTree<T extends Comparable<T>> { 
 private TreeNode<T> root; 
 
 // Insert method (BST style) 
 public void insert(T value) { 
     root = insertRec(root, value); 
 } 
 private TreeNode<T> insertRec(TreeNode<T> node, T value) { 
     if (node == null) { 
         return new TreeNode<>(value); 
     } 
     if (value.compareTo(node.data) < 0) { 
         node.left = insertRec(node.left, value); 
     } else if (value.compareTo(node.data) > 0) { 
         node.right = insertRec(node.right, value); 
     } 
     return node; 
 } 
 // Inorder traversal (DFS) 
 public void inOrder() { 
     inOrderRec(root); 
     System.out.println(); 
 } 
 private void inOrderRec(TreeNode<T> node) { 
     if (node != null) { 
         inOrderRec(node.left); 
         System.out.print(node.data + " "); 
         inOrderRec(node.right); 
     } 
 } 
 // Preorder traversal (DFS) 
 public void preOrder() { 
     preOrderRec(root); 
     System.out.println(); 
 } 
 private void preOrderRec(TreeNode<T> node) { 
     if (node != null) { 
         System.out.print(node.data + " "); 
         preOrderRec(node.left); 
         preOrderRec(node.right); 
     } 
 } 
 // Postorder traversal (DFS) 
 public void postOrder() { 
     postOrderRec(root); 
     System.out.println(); 
 } 
 private void postOrderRec(TreeNode<T> node) { 
     if (node != null) { 
         postOrderRec(node.left); 
         postOrderRec(node.right); 
         System.out.print(node.data + " "); 
     } 
 } 
 // Level order traversal (BFS) 
 public void levelOrder() { 
     if (root == null) return; 
     Queue<TreeNode<T>> queue = new LinkedList<>(); 
     queue.add(root); 
     while (!queue.isEmpty()) { 
         TreeNode<T> node = queue.poll(); 
         System.out.print(node.data + " "); 
         if (node.left != null) queue.add(node.left); 
         if (node.right != null) queue.add(node.right); 
     } 
     System.out.println(); 
 } 
} 
//Main class with test cases 
public class GenericBinaryTreeTest { 
 public static void main(String[] args) { 
  System.out.println("JAGANNATHAN S"); 
  System.out.println("21172400700120"); 
     BinaryTree<Integer> tree = new BinaryTree<>(); 
     // TC1: Insert 10, 5, 20 
     tree.insert(10); 
     tree.insert(5); 
     tree.insert(20); 
 
     System.out.println("TC2: Level Order → Expected: 10 5 20"); 
     tree.levelOrder(); 
     System.out.println("TC3: In-Order → Expected: 5 10 20"); 
     tree.inOrder(); 
     System.out.println("TC4: Pre-Order → Expected: 10 5 20"); 
     tree.preOrder(); 
     System.out.println("TC5: Post-Order → Expected: 5 20 10"); 
     tree.postOrder(); 
 } 
}
